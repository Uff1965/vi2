cmake_minimum_required(VERSION 3.22)

find_package(Git REQUIRED)

function(vi_get_version_from_git VAR_NAME)
	set(${VAR_NAME}_COMMIT "unknown" PARENT_SCOPE)
	set(${VAR_NAME}_DATETIME "unknown" PARENT_SCOPE)
	set(${VAR_NAME}_DESCRIBE "" PARENT_SCOPE)
	set(${VAR_NAME}_VERSION_NUMBER "0.0.0" PARENT_SCOPE)
	set(${VAR_NAME}_VERSION_NUMBER_MAJOR "0" PARENT_SCOPE)
	set(${VAR_NAME}_VERSION_NUMBER_MINOR "0" PARENT_SCOPE)
	set(${VAR_NAME}_VERSION_NUMBER_PATCH "0" PARENT_SCOPE)
	set(${VAR_NAME}_VERSION_LABEL "" PARENT_SCOPE)

	if(GIT_FOUND)
		execute_process(
			COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
			WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
			OUTPUT_VARIABLE GIT_COMMIT
			OUTPUT_STRIP_TRAILING_WHITESPACE
		)
		set(${VAR_NAME}_COMMIT ${GIT_COMMIT} PARENT_SCOPE)

		execute_process(
			COMMAND ${GIT_EXECUTABLE} log -1 --format=%cd --date=iso
			WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
			OUTPUT_VARIABLE GIT_DATETIME
			OUTPUT_STRIP_TRAILING_WHITESPACE
		)
		set(${VAR_NAME}_DATETIME ${GIT_DATETIME} PARENT_SCOPE)

		execute_process(
			COMMAND ${GIT_EXECUTABLE} describe --tags --long --always --abbrev --dirty --broken
			WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
			OUTPUT_VARIABLE GIT_DESCRIBE
			OUTPUT_STRIP_TRAILING_WHITESPACE
		)
		set(${VAR_NAME}_DESCRIBE ${GIT_DESCRIBE} PARENT_SCOPE)

		string(REGEX MATCH "^(v\\.?)?(([0-9]+)(\\.([0-9]+))?(\\.([0-9]+))?)-(.*)" MATCHED "${GIT_DESCRIBE}")
		if(MATCHED)
			set(${VAR_NAME}_VERSION_NUMBER "${CMAKE_MATCH_2}" PARENT_SCOPE)
			set(${VAR_NAME}_VERSION_NUMBER_MAJOR "${CMAKE_MATCH_3}" PARENT_SCOPE)
			set(${VAR_NAME}_VERSION_NUMBER_MINOR "${CMAKE_MATCH_5}" PARENT_SCOPE)
			set(${VAR_NAME}_VERSION_NUMBER_PATCH "${CMAKE_MATCH_7}" PARENT_SCOPE)
			set(${VAR_NAME}_VERSION_LABEL "${CMAKE_MATCH_8}" PARENT_SCOPE)
		endif()
	endif()
endfunction()
